
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}
http {
	upstream tomcatproxy{
		server 192.168.81.243:80;
		server 192.168.81.235:80;
	}
	lua_shared_dict healthcheck 1m;
        lua_shared_dict user_define 1m;
	init_worker_by_lua_block {
        local hc = require "resty.upstream.healthcheck"
 
        local ok, err = hc.spawn_checker{
            shm = "healthcheck",  -- defined by "lua_shared_dict"
            upstream = "tomcatproxy", -- defined by "upstream"
            type = "http",
 
            http_req = "GET /index.html HTTP/1.0\r\nconnection: keep-alive\r\n\r\n",
                    -- raw HTTP request for checking
 
            interval = 2000,  -- run the check cycle every 2 sec
            timeout = 1000,   -- 1 sec is the timeout for network operations
            fall = 3,  -- # of successive failures before turning a peer down
            rise = 2,  -- # of successive successes before turning a peer up
            valid_statuses = {200, 302},  -- a list valid HTTP status code
            concurrency = 10,  -- concurrency level for test requests
        }
        if not ok then
            ngx.log(ngx.ERR, "failed to spawn health checker: ", err)
            return
        end
    }
	server{
		listen 80;
		server_name 192.168.81.185;
		    location /add_user_define {
         content_by_lua '
                local  user_fun = require "upstream_update"
                user_fun.add_user_define()
            ';
                              }
    location /del_user_define {
         content_by_lua '
                local  user_fun = require "upstream_update"
                user_fun.del_user_define()
            ';
                              }

		location / {
			set_by_lua $cur_ups '
				local ups = ngx.shared["user_define"]
				if ups ~= nil then
					local use = {
						server 192.168.81.247:80;
						server 192.168.81.247:3000;
						}
					return use;
				end
				return "tomcatproxy";
			'
			proxy_next_upstream off;
			proxy_set_header    Host $host;
			proxy_http_version  1.1;
			proxy_set_header    Connection  "";
			proxy_pass $scheme://$cur_ups;
		}
	}
}
